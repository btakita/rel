// Generated by CoffeeScript 1.4.0
(function() {
  var InsertManager, InsertStatement, Nodes, TreeManager, exports, u,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  u = require('underscore');

  TreeManager = require('./tree-manager');

  InsertStatement = require('./nodes/insert-statement');

  Nodes = require('./nodes/nodes');

  InsertManager = (function(_super) {

    __extends(InsertManager, _super);

    function InsertManager() {
      InsertManager.__super__.constructor.call(this);
      this.ast = new InsertStatement();
    }

    InsertManager.prototype.createValues = function(values, columns) {
      return new Nodes.Values(values, columns);
    };

    InsertManager.prototype.columns = function() {
      return this.ast.columns;
    };

    InsertManager.prototype.values = function(values) {
      if (values != null) {
        return this.ast.values = values;
      } else {
        return this.ast.values;
      }
    };

    InsertManager.prototype.insert = function(fields) {
      var values, _base,
        _this = this;
      if (u(fields).isEmpty()) {
        return;
      }
      if (fields.constructor === String) {
        return this.ast.values = new Nodes.SqlLiteral(fields);
      } else {
        (_base = this.ast).relation || (_base.relation = fields[0][0].relation);
        values = [];
        u(fields).each(function(field) {
          var column, value;
          column = field[0];
          value = field[1];
          _this.ast.columns.push(column);
          return values.push(value);
        });
        return this.ast.values = this.createValues(values, this.ast.columns);
      }
    };

    InsertManager.prototype.into = function(table) {
      this.ast.relation = table;
      return this;
    };

    return InsertManager;

  })(TreeManager);

  exports = module.exports = InsertManager;

}).call(this);
