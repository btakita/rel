// Generated by CoffeeScript 1.4.0
(function() {
  var Attributes, Nodes, SqlLiteral, ToSql, Visitor, exports, u,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  u = require('underscore');

  Visitor = require('./visitor');

  Nodes = require('../nodes/nodes');

  SqlLiteral = require('../nodes/sql-literal');

  Attributes = require('../attributes');

  require('date-utils');

  ToSql = (function(_super) {

    __extends(ToSql, _super);

    function ToSql() {
      this.connection = null;
      this.pool = null;
      this.lastColumn = null;
    }

    ToSql.prototype.accept = function(object) {
      var _this = this;
      this.last_column = null;
      this.pool = null;
      if (this.pool != null) {
        this.pool.withConnection(function(conn) {
          return _this.connection = conn;
        });
      }
      return ToSql.__super__.accept.call(this, object);
    };

    ToSql.prototype.visitRelNodesDeleteStatement = function(o) {
      var _this = this;
      return u([
        "DELETE FROM " + (this.visit(o.relation)), (!u(o.wheres).isEmpty() ? "WHERE " + ((u(o.wheres).map(function(x) {
          return _this.visit(x);
        })).join('AND ')) : void 0)
      ]).compact().join(' ');
    };

    ToSql.prototype.buildSubSelect = function(key, o) {
      var core, stmt;
      stmt = new Nodes.SelectStatement;
      core = u(stmt.cores).first();
      core.froms = o.relation;
      core.wheres = o.wheres;
      core.projections = [key];
      stmt.limit = o.limit;
      stmt.orders = o.orders;
      return stmt;
    };

    ToSql.prototype.visitRelNodesUpdateStatement = function(o) {
      var key, wheres,
        _this = this;
      wheres = u(o.orders).isEmpty() && !(o.limit != null) ? o.wheres : (key = o.key, [new Nodes.In(key, [this.buildSubselect(key, o)])]);
      return u([
        "UPDATE " + (this.visit(o.relation)), (!u(o.values).isEmpty() ? "SET " + ((o.values.map(function(value) {
          return _this.visit(value);
        })).join(', ')) : void 0), (!u(o.wheres).isEmpty() ? "WHERE " + ((wheres.map(function(x) {
          return _this.visit(x);
        })).join(' AND ')) : void 0)
      ]).compact().join(' ');
    };

    ToSql.prototype.buildSubselect = function(key, o) {
      var core, stmt;
      stmt = new Nodes.SelectStatement();
      core = stmt.cores[0];
      core.froms = o.relation;
      core.wheres = o.wheres;
      core.projections = [key];
      stmt.limit = o.limit;
      stmt.orders = o.orders;
      return stmt;
    };

    ToSql.prototype.visitRelNodesAssignment = function(o) {
      var right;
      right = this.quote(o.right, this.columnFor(o.left));
      return "" + (this.visit(o.left)) + " = " + right;
    };

    ToSql.prototype.visitRelNodesUnqualifiedColumn = function(o) {
      return this.quoteColumnName(o.name());
    };

    ToSql.prototype.visitRelNodesInsertStatement = function(o) {
      var _this = this;
      return u([
        "INSERT INTO " + (o.relation != null ? this.visit(o.relation) : 'NULL'), (!u(o.columns).isEmpty() ? "(" + ((u(o.columns).map(function(x) {
          return _this.quoteColumnName(x);
        })).join(', ')) + ")" : void 0), (o.values != null ? this.visit(o.values) : void 0)
      ]).compact().join(' ');
    };

    ToSql.prototype.visitRelNodesValues = function(o) {
      var _this = this;
      return "VALUES (" + ((u(o.expressions()).map(function(expr) {
        if (expr === null) {
          return _this.quote(expr, null);
        } else if (expr.constructor === SqlLiteral) {
          return _this.visitRelNodesSqlLiteral(expr);
        } else {
          return _this.quote(expr, null);
        }
      })).join(', ')) + ")";
    };

    ToSql.prototype.visitRelNodesExist = function(o) {
      return "EXISTS (" + (this.visit(o.expressions)) + ")" + (o.alias ? " AS " + (visit(o.alias)) : '');
    };

    ToSql.prototype.tableExists = function(name) {
      return false;
    };

    ToSql.prototype.visitRelNodesSelectStatement = function(o) {
      var _this = this;
      return u([
        (o["with"] != null ? this.visit(o["with"]) : void 0), (o.cores.map(function(x) {
          return _this.visitRelNodesSelectCore(x);
        })).join(), (!u(o.orders).isEmpty() ? "ORDER BY " + ((o.orders.map(function(x) {
          return _this.visit(x);
        })).join(', ')) : void 0), (o.limit != null ? this.visit(o.limit) : void 0), (o.offset != null ? this.visit(o.offset) : void 0), (o.lock != null ? this.visit(o.lock) : void 0)
      ]).compact().join(' ');
    };

    ToSql.prototype.visitRelNodesSelectCore = function(o) {
      var _this = this;
      return u([
        "SELECT", (o.top != null ? this.visit(o.top) : void 0), "" + ((o.projections.map(function(x) {
          return _this.visit(x);
        })).join(', ')), this.visit(o.source), (!u(o.wheres).isEmpty() ? "WHERE " + ((o.wheres.map(function(x) {
          return _this.visit(x);
        })).join(' AND ')) : void 0), (!u(o.groups).isEmpty() ? "GROUP BY " + ((o.groups.map(function(x) {
          return _this.visit(x);
        })).join(', ')) : void 0), (o.having != null ? this.visit(o.having) : void 0)
      ]).compact().join(' ');
    };

    ToSql.prototype.visitRelNodesJoinSource = function(o) {
      var _this = this;
      if (!((o.left != null) || !u(o.right).isEmpty())) {
        return;
      }
      return u([
        "FROM", (o.left != null ? this.visit(o.left) : void 0), (o.right != null ? (o.right.map(function(j) {
          return _this.visit(j);
        })).join(' ') : void 0)
      ]).compact().join(' ');
    };

    ToSql.prototype.visitRelNodesTable = function(o) {
      if (o.tableAlias != null) {
        return "" + (this.quoteTableName(o.name)) + " " + (quoteTableName(o.tableAlias));
      } else {
        return this.quoteTableName(o.name);
      }
    };

    ToSql.prototype.quoteTableName = function(name) {
      if (Nodes.SqlLiteral === name.constructor) {
        return name;
      } else {
        return "\"" + name + "\"";
      }
    };

    ToSql.prototype.quoteColumnName = function(name) {
      if (Nodes.SqlLiteral === name.constructor) {
        return name;
      } else if (Attributes.Attribute === name.constructor) {
        return this.quote(name.name);
      } else {
        return "\"" + name + "\"";
      }
    };

    ToSql.prototype.visitRelNodesArray = function(o) {
      var _this = this;
      if (u(o).empty != null) {
        return 'NULL';
      } else {
        return (o.map(function(x) {
          return _this.visit(x);
        })).join(', ');
      }
    };

    ToSql.prototype.literal = function(o) {
      return o;
    };

    ToSql.prototype.visitRelNodesSqlLiteral = function(o) {
      return this.literal(o);
    };

    ToSql.prototype.visitRelNodesGroup = function(o) {
      return this.visit(o.expr);
    };

    ToSql.prototype.visitRelNodesAttribute = function(o) {
      var joinName;
      this.lastColumn = this.columnFor(o);
      joinName = o.relation.tableAlias || o.relation.name;
      return "" + (this.quoteTableName(joinName)) + "." + (this.quoteColumnName(o.name));
    };

    ToSql.prototype.visitRelNodesAttrInteger = function(o) {
      return this.visitRelNodesAttribute(o);
    };

    ToSql.prototype.visitRelNodesAttrFloat = function(o) {
      return this.visitRelNodesAttribute(o);
    };

    ToSql.prototype.visitRelNodesAttrString = function(o) {
      return this.visitRelNodesAttribute(o);
    };

    ToSql.prototype.visitRelNodesAttrTime = function(o) {
      return this.visitRelNodesAttribute(o);
    };

    ToSql.prototype.visitRelNodesAttrBoolean = function(o) {
      return this.visitRelNodesAttribute(o);
    };

    ToSql.prototype.quoted = function(o) {
      return this.quote(o, this.last_column);
    };

    ToSql.prototype.visitRelNodesString = function(o) {
      return this.quoted(o);
    };

    ToSql.prototype.visitRelNodesDate = function(o) {
      return this.quoted(o);
    };

    ToSql.prototype.visitRelNodesNumber = function(o) {
      return this.literal(o);
    };

    ToSql.prototype.quote = function(value, column) {
      if (column == null) {
        column = null;
      }
      if (value === null) {
        return 'NULL';
      } else if (value.constructor === Boolean) {
        if (value === true) {
          return "'t'";
        } else {
          return "'f'";
        }
      } else if (value.constructor === Date) {
        return value.toDBString();
      } else if (value.constructor === Number) {
        return value;
      } else {
        return "\"" + value + "\"";
      }
    };

    ToSql.prototype.columnFor = function(attr) {
      return attr.name.toString();
    };

    ToSql.prototype.visitRelNodesHaving = function(o) {
      return "HAVING " + (this.visit(o.expr));
    };

    ToSql.prototype.visitRelNodesAnd = function(o) {
      var _this = this;
      return (o.children.map(function(x) {
        return _this.visit(x);
      })).join(' AND ');
    };

    ToSql.prototype.visitRelNodesOr = function(o) {
      return "" + (this.visit(o.left)) + " OR " + (this.visit(o.right));
    };

    ToSql.prototype.visitRelNodesInnerJoin = function(o) {
      return "INNER JOIN " + (this.visit(o.left)) + " " + ((o.right != null) && u(o.right).any() ? this.visit(o.right) : void 0);
    };

    ToSql.prototype.visitRelNodesOn = function(o) {
      return "ON " + (this.visit(o.expr));
    };

    ToSql.prototype.visitRelNodesTableAlias = function(o) {
      return "" + (this.visit(o.relation)) + " " + (this.quoteTableName(o.name));
    };

    ToSql.prototype.visitRelNodesOffset = function(o) {
      return "OFFSET " + (this.visit(o.expr));
    };

    ToSql.prototype.visitRelNodesExists = function(o) {
      var e;
      e = o.alias ? " AS " + (this.visit(o.alias)) : '';
      return "EXISTS (" + (this.visit(o.expressions)) + ")" + e;
    };

    ToSql.prototype.visitRelNodesUnion = function(o) {
      return "( " + (this.visit(o.left)) + " UNION " + (this.visit(o.right)) + " )";
    };

    ToSql.prototype.visitRelNodesLessThan = function(o) {
      return "" + (this.visit(o.left)) + " < " + (this.visit(o.right));
    };

    ToSql.prototype.visitRelNodesGreaterThan = function(o) {
      return "" + (this.visit(o.left)) + " > " + (this.visit(o.right));
    };

    ToSql.prototype.visitRelNodesUnionAll = function(o) {
      return "( " + (this.visit(o.left)) + " UNION ALL " + (this.visit(o.right)) + " )";
    };

    ToSql.prototype.visitRelNodesExcept = function(o) {
      return "( " + (this.visit(o.left)) + " EXCEPT " + (this.visit(o.right)) + " )";
    };

    ToSql.prototype.visitRelNodesIn = function(o) {
      return "" + (this.visit(o.left)) + " IN (" + (this.visit(o.right)) + ")";
    };

    ToSql.prototype.visitRelNodesBetween = function(o) {
      return "" + (this.visit(o.left)) + " BETWEEN (" + (this.visit(o.right)) + ")";
    };

    ToSql.prototype.visitRelNodesIntersect = function(o) {
      return "( " + (this.visit(o.left)) + " INTERSECT " + (this.visit(o.right)) + " )";
    };

    ToSql.prototype.visitRelNodesWith = function(o) {
      var _this = this;
      return "WITH " + ((o.children.map(function(x) {
        return _this.visit(x);
      })).join(', '));
    };

    ToSql.prototype.visitRelNodesWithRecursive = function(o) {
      var _this = this;
      return "WITH RECURSIVE " + ((o.children.map(function(x) {
        return _this.visit(x);
      })).join(', '));
    };

    ToSql.prototype.visitRelNodesAs = function(o) {
      return "" + (this.visit(o.left)) + " AS " + (this.visit(o.right));
    };

    ToSql.prototype.visitRelNodesEquality = function(o) {
      var right;
      right = o.right;
      if (right != null) {
        return "" + (this.visit(o.left)) + " = " + (this.visit(right));
      } else {
        return "" + (this.visit(o.left)) + " IS NULL";
      }
    };

    ToSql.prototype.visitRelNodesLock = function(o) {};

    ToSql.prototype.visitRelNodesOuterJoin = function(o) {
      return "LEFT OUTER JOIN " + (this.visit(o.left)) + " " + (this.visit(o.right));
    };

    ToSql.prototype.visitRelNodesStringJoin = function(o) {
      return this.visit(o.left);
    };

    ToSql.prototype.visitRelNodesTop = function(o) {
      return "";
    };

    ToSql.prototype.visitRelNodesLimit = function(o) {
      return "LIMIT " + (this.visit(o.expr));
    };

    ToSql.prototype.visitRelNodesGrouping = function(o) {
      return "(" + (this.visit(o.expr)) + ")";
    };

    return ToSql;

  })(Visitor);

  exports = module.exports = ToSql;

}).call(this);
