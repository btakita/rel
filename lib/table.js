// Generated by CoffeeScript 1.4.0
(function() {
  var Attributes, Crud, DeleteManager, FactoryMethods, InsertManager, Nodes, SelectManager, Table, UpdateManager, u,
    __slice = [].slice;

  u = require('underscore');

  SelectManager = require('./select-manager');

  InsertManager = require('./insert-manager');

  UpdateManager = require('./update-manager');

  DeleteManager = require('./delete-manager');

  Attributes = require('./attributes');

  Nodes = require('./nodes/nodes');

  FactoryMethods = require('./factory-methods');

  Crud = require('./crud');

  Table = (function() {

    function Table(name, opts) {
      this.name = name;
      if (opts == null) {
        opts = {};
      }
      this.columns = null;
      this.aliases = [];
      this.tableAlias = null;
      u(this).extend(new FactoryMethods());
      u(this).extend(new Crud());
      if (opts['as'] != null) {
        this.tableAlias = opts['as'];
      }
    }

    Table.prototype.from = function(table) {
      return new SelectManager(table);
    };

    Table.prototype.project = function() {
      var things;
      things = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.from(this).project(things);
    };

    Table.prototype.attribute = function(name) {
      return new Attributes.Attribute(this, name);
    };

    Table.prototype.alias = function(name) {
      var _this = this;
      if (name == null) {
        name = "" + this.name + "_2";
      }
      return u(new Nodes.TableAlias(this, name)).tap(function(node) {
        return _this.aliases.push(node);
      });
    };

    Table.prototype.column = function(name) {
      return new Attributes.Attribute(this, name);
    };

    Table.prototype.join = function(relation, klass) {
      if (klass == null) {
        klass = Nodes.InnerJoin;
      }
      if (relation == null) {
        return this.from(this);
      }
      switch (relation.constructor) {
        case String:
        case Nodes.SqlLiteral:
          klass = Nodes.StringJoin;
      }
      return this.from(this).join(relation, klass);
    };

    Table.prototype.insertManager = function() {
      return new InsertManager();
    };

    Table.prototype.skip = function(amount) {
      return this.from(this).skip(amount);
    };

    Table.prototype.selectManager = function() {
      return new SelectManager();
    };

    Table.prototype.having = function(expr) {
      return this.from(this).having(expr);
    };

    Table.prototype.group = function() {
      var columns;
      columns = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.from(this).group(columns);
    };

    Table.prototype.order = function() {
      var expr;
      expr = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.from(this).order(expr);
    };

    Table.prototype.take = function(amount) {
      return this.from(this).take(amount);
    };

    Table.prototype.where = function(condition) {
      return this.from(this).where(condition);
    };

    return Table;

  })();

  module.exports = Table;

}).call(this);
