// Generated by CoffeeScript 1.4.0
(function() {
  var Nodes, Rel, SelectManager, TreeManager, Visitors, exports, u,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  u = require('underscore');

  Nodes = null;

  TreeManager = require('./tree-manager');

  Rel = require('../rel');

  Visitors = require('./visitors');

  SelectManager = (function(_super) {

    __extends(SelectManager, _super);

    function SelectManager(table) {
      SelectManager.__super__.constructor.call(this);
      Nodes = require('./nodes/nodes');
      this.ast = new Nodes.SelectStatement();
      this.ctx = u(this.ast.cores).last();
      this.from(table);
    }

    SelectManager.prototype.project = function() {
      var projections;
      projections = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.ctx.projections = this.ctx.projections.concat(projections.map(function(x) {
        if (x.constructor === String) {
          return new Nodes.SqlLiteral(x.toString());
        } else {
          return x;
        }
      }));
      return this;
    };

    SelectManager.prototype.order = function() {
      var expr,
        _this = this;
      expr = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.ast.orders = this.ast.orders.concat(expr.map(function(x) {
        if (x.constructor === String) {
          return new Nodes.SqlLiteral(x.toString());
        } else {
          return x;
        }
      }));
      return this;
    };

    SelectManager.prototype.orders = function() {
      return this.ast.orders;
    };

    SelectManager.prototype.from = function(table) {
      if ((table != null) && table.constructor === String) {
        table = new Nodes.SqlLiteral(table);
      }
      if (table != null) {
        switch (table.constructor) {
          case Nodes.Join:
            this.ctx.source.right.push(table);
            break;
          case Nodes.InnerJoin:
            this.ctx.source.right.push(table);
            break;
          case Nodes.OuterJoin:
            this.ctx.source.right.push(table);
            break;
          case Nodes.StringJoin:
            this.ctx.source.right.push(table);
            break;
          default:
            this.ctx.source.left = table;
        }
      } else {
        this.ctx.source.left = null;
      }
      return this;
    };

    SelectManager.prototype.froms = function() {
      return u(this.ast.cores.map(function(x) {
        return x.from();
      })).compact();
    };

    SelectManager.prototype.group = function() {
      var c, column, columns, _i, _len;
      columns = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = columns.length; _i < _len; _i++) {
        column = columns[_i];
        c = column.constructor === String ? new Nodes.SqlLiteral(column.toString()) : column;
        this.ctx.groups.push(new Nodes.Group(c));
      }
      return this;
    };

    SelectManager.prototype.as = function(other) {
      return this.createTableAlias(this.grouping(this.ast), new Nodes.SqlLiteral(other));
    };

    SelectManager.prototype.having = function() {
      var exprs;
      exprs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.ctx.having = new Nodes.Having(this.collapse(exprs, this.ctx.having));
      return this;
    };

    SelectManager.prototype.collapse = function(exprs, existing) {
      var _this = this;
      if (existing == null) {
        existing = null;
      }
      if (existing != null) {
        exprs = exprs.unshift(existing.expr);
      }
      exprs = u(exprs).compact().map(function(expr) {
        if (expr.constructor === String) {
          return Rel.sql(expr);
        } else {
          return expr;
        }
      });
      if (exprs.length === 1) {
        return exprs[0];
      } else {
        return this.createAnd(exprs);
      }
    };

    SelectManager.prototype.join = function(relation, klass) {
      if (klass == null) {
        klass = Nodes.InnerJoin;
      }
      if (relation == null) {
        return this;
      }
      switch (relation.constructor) {
        case String:
        case Nodes.SqlLiteral:
          klass = Nodes.StringJoin;
      }
      this.ctx.source.right.push(this.createJoin(relation, null, klass));
      return this;
    };

    SelectManager.prototype.on = function() {
      var exprs;
      exprs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      u(this.ctx.source.right).last().right = new Nodes.On(this.collapse(exprs));
      return this;
    };

    SelectManager.prototype.skip = function(amount) {
      if (amount != null) {
        this.ast.offset = new Nodes.Offset(amount);
      } else {
        this.ast.offset = null;
      }
      return this;
    };

    SelectManager.prototype.offset = function(amount) {
      return this.skip(amount);
    };

    SelectManager.prototype.exists = function() {
      return new Nodes.Exists(this.ast);
    };

    SelectManager.prototype.capitalize = function(string) {
      var op;
      op = string.toString();
      return op[0].toUpperCase() + op.slice(1, op.length);
    };

    SelectManager.prototype.union = function(operation, other) {
      var nodeClass;
      if (other == null) {
        other = null;
      }
      nodeClass = other != null ? Nodes["Union" + (this.capitalize(operation))] : (other = operation, Nodes.Union);
      return new nodeClass(this.ast, other.ast);
    };

    SelectManager.prototype.except = function(other) {
      return new Nodes.Except(this.ast, other.ast);
    };

    SelectManager.prototype.minus = function(other) {
      return this.except(other);
    };

    SelectManager.prototype.intersect = function(other) {
      return new Nodes.Intersect(this.ast, other.ast);
    };

    SelectManager.prototype["with"] = function() {
      var nodeClass, subqueries;
      subqueries = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      nodeClass = u(subqueries).first().constructor === String ? Nodes["With" + (this.capitalize(subqueries.shift()))] : Nodes.With;
      this.ast["with"] = new nodeClass(u(subqueries).flatten());
      return this;
    };

    SelectManager.prototype.take = function(limit) {
      if (limit != null) {
        this.ast.limit = new Nodes.Limit(limit);
        this.ctx.top = new Nodes.Top(limit);
      } else {
        this.ast.limit = null;
        this.ctx.top = null;
      }
      return this;
    };

    SelectManager.prototype.limit = function(limit) {
      if (limit != null) {
        return this.take(limit);
      } else {
        return this.ast.limit.expr;
      }
    };

    SelectManager.prototype.taken = function() {
      return this.limit();
    };

    SelectManager.prototype.lock = function(locking) {
      if (locking == null) {
        locking = Rel.sql('FOR UPDATE');
      }
      this.ast.lock = new Nodes.Lock(locking);
      return this;
    };

    SelectManager.prototype.locked = function() {
      return this.ast.lock;
    };

    SelectManager.prototype.joinSql = function() {
      var sql;
      if (this.ctx.source.right === null || u(this.ctx.source.right).isEmpty()) {
        return null;
      }
      sql = u(u(this.visitor).clone()).extend(Visitors.JoinSql).accept(this.ctx);
      return new Nodes.SqlLiteral(sql);
    };

    SelectManager.prototype.orderClauses = function() {
      var _this = this;
      return new Visitors.OrderClauses().accept(this.ast).map(function(x) {
        return new Nodes.SqlLiteral(x);
      });
    };

    SelectManager.prototype.whereSql = function() {
      var viz;
      if (u(this.ctx.wheres).isEmpty()) {
        return;
      }
      viz = new Visitors.WhereSql();
      return new Nodes.SqlLiteral(viz.accept(this.ctx));
    };

    return SelectManager;

  })(TreeManager);

  exports = module.exports = SelectManager;

}).call(this);
